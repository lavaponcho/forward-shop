import { createAction, createSlice } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { CartItem, CheckoutForm } from '../../app/types';
import { clearCart, getCartItems } from '../cart/cartSlice';

export interface orderState {
  payment_details: CheckoutForm | null;
  order_items: CartItem[];
}

const initialState: orderState = {
  payment_details: null,
  order_items: [],
};

export const addPaymentDetails = createAction<CheckoutForm | null>('addPaymentDetails')
export const addOrderItems = createAction<CartItem[]>('addOrderItems')

export const orderSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addPaymentDetails, (state,action) => {
        state.payment_details = action.payload;
      }).addCase(addOrderItems, (state,action) => {
        state.order_items = action.payload;
      });
  },
});

export const completeOrder = (checkout: CheckoutForm): AppThunk => (
  dispatch,
  getState
) => {
  const cart_items = getCartItems(getState());
  dispatch(addOrderItems(cart_items));
  dispatch(addPaymentDetails(checkout));
  dispatch(clearCart());
};

export const processContinueShopping = (): AppThunk => (
  dispatch,
  getState
) => {
  dispatch(addOrderItems([]));
  dispatch(addPaymentDetails(null));
};

export const getPaymentDetails = (state: RootState) => state.order.payment_details;

export const getOrderItems = (state: RootState) => state.order.order_items;

export default orderSlice.reducer;
