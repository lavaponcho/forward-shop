import { createAction, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { Product } from '../../app/types';
import { initialProducts } from './products';

export interface ProductState {
  products: Product[];
}

const initialState: ProductState = {
  products: initialProducts,
};

export const increment = createAction<number | undefined>('counter/increment')

export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(increment, (state,action) => {
      });
  },
});

export const getProducts = (state: RootState) => state.product.products;

export const getProductById = (product_id:number) => (state: RootState) => {
  let products = state.product.products;

  return products.find((product) => {
    return product.id == product_id;
  })
};


export default productSlice.reducer;
