import { createAction, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { CartItem } from '../../app/types';
import { getProductById } from '../products/productSlice';

export interface CartState {
  items: CartItem[];
}

const initialState: CartState = {
  items: [],
};

export const addProductToCart = createAction<number>('addProductToCart')
export const removeProductTFromCart = createAction<number>('removeProductToCart')

export const increaseProductQuantity = createAction<number>('increaseProductQuantity')

export const decreaseProductQuantity = createAction<number>('decreaseProductQuantity')
export const clearCart = createAction('clearCart')

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addProductToCart, (state,action) => {
        let product_id = action.payload;
        let cart_item = state.items.find((item) => {
          return item.product_id == product_id;
        });
        if(!cart_item){
          state.items.push({
            product_id:product_id,
            quantity:1
          });
        }
      }).addCase(removeProductTFromCart, (state,action) => {
        let product_id = action.payload;
        state.items = state.items.filter((item) => {
          return item.product_id != product_id;
        });
        
      }).addCase(increaseProductQuantity, (state,action) => {
        let product_id = action.payload;
        let index = state.items.findIndex((item) => {
          return item.product_id == product_id;
        });
        if(index !== -1){
          state.items[index].quantity++;
        }
        
      }).addCase(decreaseProductQuantity, (state,action) => {
        let product_id = action.payload;
        let index = state.items.findIndex((item) => {
          return item.product_id == product_id;
        });
        if(index !== -1){
          state.items[index].quantity--;
          if(state.items[index].quantity == 0){
            state.items.splice(index,1);
          }
        }
      }).addCase(clearCart, (state,action) => {
        state.items = [];
      });
  },
});

export const getCartItems = (state: RootState) => state.cart.items;

export const getCartItemByProductId = (product_id:number) => (state: RootState) => {

  return state.cart.items.find((item) => {
    return item.product_id == product_id;
  })
};

export const getTotalCartAmount = (state: RootState) => {

  let total = 0;

  state.cart.items.forEach((item) => {
    let product = getProductById(item.product_id)(state);
    if(product){
      total += (item.quantity * product.price);
    }
  })

  return total.toFixed(2);
};

export default cartSlice.reducer;
